openapi: 3.0.3
info:
  title: Chat4Me - Authentication Service
  version: 1.0.0
  description: >
    The **Chat4Me Authentication Service** manages user authentication, identity verification, 
    and token-based access control.

    It ensures secure access through Strong Customer Authentication (SCA) and enables users to obtain, validate, and refresh their access tokens.


    **Key Features:**

    - Initiate login with Strong Customer Authentication (SCA).

    - Verify OTP to complete user authentication.

    - Validate and refresh JWT-based access tokens.

    - Secure token management for user sessions.

servers:
  - url: http://localhost:8081
    description: Authentication service production server

tags:
  - name: auth
    description: Endpoints for authentication, login, and token management.

paths:
  /auth/start-login:
    post:
      tags:
        - auth
      summary: Start SCA login process
      operationId: startLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: Login initiated, OTP sent, returns challenge ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeResponseDto'

  /auth/verify-otp:
    post:
      tags:
        - auth
      summary: Verify OTP and complete login
      operationId: verifyOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerificationRequestDto'
      responses:
        '200':
          description: OTP verified, returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenDto'

  /auth/validate-token:
    post:
      tags:
        - auth
      summary: Validate access token
      operationId: validateToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenValidationRequestDto'
      responses:
        '200':
          description: Token is valid
        '400':
          description: Bad request - Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /auth/extract-uuid:
    post:
      tags:
        - auth
      summary: Extract UUID from access token
      operationId: extractUUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdRequestDto'
      responses:
        '200':
          description: UUID issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh expired access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenDto'
  
  /users:
    get:
      tags:
        - users
      summary: Get a list of available users
      operationId: getUsers
      parameters:
        - name: access-token
          in: query
          description: The access token for the user authentication.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

components:
  schemas:
    LoginRequestDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    ChallengeResponseDto:
      type: object
      properties:
        challenge_id:
          type: string
          format: uuid
        message:
          type: string
        user_id:
          type: string
          format: uuid

    OTPVerificationRequestDto:
      type: object
      required:
        - challenge_id
        - otp
      properties:
        challenge_id:
          type: string
          format: uuid
        otp:
          type: string
        expiresAt:
          type: integer
          format: int64
        user_id:
          type: string
          format: uuid

    AuthTokenDto:
      type: object
      properties:
        token_id:
          type: string
          format: uuid
        access_token:
          type: string
          description: The access token for authentication.
        expires_in:
          type: integer
          format: int64
        message:
          type: string
        user_id:
          type: string
          format: uuid

    TokenValidationRequestDto:
      type: object
      required:
        - access_token
      properties:
        token_id:
          type: string
          format: uuid
        access_token:
          type: string
        user_id:
          type: string
          format: uuid

    UserIdRequestDto:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string

    RefreshTokenRequestDto:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
    
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        token_id:
          type: string
          format: uuid

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'

    ErrorMessage:
      type: object
      properties:
        errorCode:
          type: string
        errorDesc:
          type: string